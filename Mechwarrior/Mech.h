#ifndef MECH_H
#define MECH_H

#include <iostream>
#include <vector>

using namespace std;

class mech
{
public:

    int heat; // current heat of the mech
    int heatsinks; // will cool the mech 1 point of heat for every heatsink after each combat round
    string description; // a brief description of the mech to help the player decide which mech they want to pilot
    int toHit; // will be a modifier to the weapon dice roll based on a mech's tonnage
    vector<weapon> weapons; // vector containing the mech's weapons
    int components[8]; // array containing integer values for each of the mech's components


    mech(); // default constructor
    mech(string, string); // debugging constructor
    mech(string, string, string, int, int); // constructor that takes a file with weapon specs, a file with component values, a file with the description, an integer for toHit and and integer for heatsinks
    ~mech(); // deconstructor

    int rngMech(int);
    bool mechDestroyed(); // function that determines if the head, center torso or both legs of the mech have been destroyed resulting in the mech's 'death'
    void popWeapons(string); // function that populates the mech's weapons vector
    void popComponents(string); // function that populates the mech's components array
    string popDescription(string); // function that builds the 'mech's description string
    void recordDamage(int, int); // function that deals damage to a given component on the mech when a hit is scored against it. takes the component index position and amount of damage as input.
    void setToZero(); // sets heat to zero
    int fireWeapon(int, int, int); // function responsible for weapons fire in combat
    void getHealth(); // wont technically return anything but will have couts in the function so the player can see how much health they or the enemy mech sill has in each component
    int getToHit(); // returns the 'speed' number for a mech
    int getHeat(); // will return current heat to display to player
    void heatSinkEffect(int); // dissipates heat on a mech
    void setHeat(int); // raises the heat value when firing weapons and lowers it when heatsink affect is applied
    int getHeatsinks(); // returns the number of heatsinks a mech has
    string getDescription(); // returns the description of a mech
    string getWeaponName(int); // returns the name of a weapon system
    float getWeaponHitChance(int); // returns the hit chance for a weapon system
    int getWeaponDamage(int); // returns the damage output for a weapon system
    int getWeaponHeat(int); // returns the head generated by a particular weapon
    int getWeaponQuantity(int); // returns the quantity of a given weapon on a mech

};
#endif // MECH_H
